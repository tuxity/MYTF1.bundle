#!/usr/bin/env python

RE_MEDIA_ID = Regex("c_idwat = '(?P<media_id>[^']+)'")
RE_SOURCES = Regex(r'(?i)bandwidth\=(\d+).*?resolution\=\d+x(\d+).*?\n(.+?\.m3u8[^\#]+)')

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(url))

    container = html.xpath('//div[contains(@id, "contentPlayer")]/div/div/div/div[contains(@class, "container")]')[0]

    title = container.xpath('./div[contains(@class, "content")]/h1[contains(@class, "title")]/text()')[0]
    summary = container.xpath('./div[contains(@class, "content")]/div[contains(@class, "description")]/p/text()')[0]
    thumb = 'http:' + container.xpath('./div[contains(@class, "iframe")]/meta[contains(@itemprop, "thumbnailUrl")]/@content')[0]
    try:
        duration = int(container.xpath('./div[contains(@class, "iframe")]/meta[contains(@itemprop, "duration")]/@content')[0]) * 1000
    except:
        duration = None
    try:
        oaa = Datetime.ParseDate(container.xpath('./div[contains(@class, "iframe")]/meta[contains(@itemprop, "uploadDate")]/@content')[0])
    except:
        oaa = None

    return VideoClipObject(
        title=title,
        summary=summary,
        thumb=thumb,
        duration=duration,
        originally_available_at=oaa
    )


####################################################################################################
@deferred
def MediaObjectsForURL(url):

    hls = get_hls(url)
    if not hls:
        raise Ex.MediaExpired

    hls_page = get_page(hls)
    sources = RE_SOURCES.findall(hls_page)
    if not sources:
        raise Ex.MediaNotAvailable

    #Log(sources)  # log raw m3u8 page
    s = list()
    for (b, r, u) in sources:
        u = u.strip()
        if ('audio=' not in u) or ('video=' not in u):
            continue
        if not u.startswith('http'):
            u = hls[:hls.rfind('/')+1] + u
        s.append((int(r), int(b)/1000, u))

    Log(u"* MYTF1 Video Sources: '{0}'".format(s))
    return [
        MediaObject(
            bitrate=bit,
            audio_channels=2,
            video_resolution=str(res),
            optimized_for_streaming=True,
            parts=[
                PartObject(key=HTTPLiveStreamURL(src))
            ]
        ) for (res, bit, src) in reversed(sorted(s))
    ]

####################################################################################################
def get_page(url, cachetime=10):
    try:
        page = HTTP.Request(url, cacheTime=cachetime).content
    except:
        Log.Exception(u"Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def GetAuthKey(app_name, media_id):

    secret = String.Decode('VzNtMCMxbUZJ')
    timestamp = get_page('http://www.wat.tv/servertime2', cachetime=60)

    string = '%s-%s-%s-%s-%s' % (media_id, secret, app_name, secret, timestamp)

    return Hash.MD5(string) + '/' + timestamp

####################################################################################################
def get_hls(prog_url):

    page = get_page(prog_url)
    mid = RE_MEDIA_ID.search(page)
    if not mid:
        raise Ex.MediaNotAvailable

    app_name = 'sdk/Iphone/1.0'
    mid = mid.group('media_id')
    user_agent = 'MyTF1/16090602 CFNetwork/808.1.4 Darwin/16.1.0'
    post_url = 'http://api.wat.tv/services/Delivery'
    data = {
        'appName': app_name, 'method': 'getUrl', 'mediaId': mid,
        'authKey': GetAuthKey(app_name, mid), 'version': '1.8.14',
        'hostingApplicationName': 'com.tf1.applitf1', 'hostingApplicationVersion': '6.3'
        }

    try:
        payload = JSON.ObjectFromString(HTTP.Request(post_url, headers={'User-Agent': user_agent}, cacheTime=60, values=data).content)
        return Regex(r'&?bw(?:max|min)=\d+').sub('', payload['message'])
    except:
        Log.Exception(u"Error: Cannot parse JSON Object from {}?{} >>>".format(post_url, data))
    return None
